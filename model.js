// Generated by CoffeeScript 1.6.3
(function() {
  var AdmZip, app, exec, express, files, fs, http, path, upload, uuid;

  express = require('express');

  http = require('http');

  path = require('path');

  AdmZip = require('adm-zip');

  fs = require('fs');

  uuid = require('node-uuid');

  upload = require('jquery-file-upload-middleware');

  exec = require('child_process').exec;

  files = require('./routes/files');

  upload.configure({
    uploadDir: __dirname + '/assets/files',
    uploadUrl: '/upload'
  });

  app = express();

  app.configure(function() {
    app.set('port', process.env.PORT || 8080);
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use('/upload', function(req, res, next) {
      return upload.fileHandler()(req, res, next);
    });
    upload.on('begin', function(fileInfo) {
      var newName, originName;
      originName = fileInfo.originalName;
      newName = uuid.v1();
      return fileInfo.name = newName + path.extname(originName);
    });
    upload.on('end', function(fileInfo) {
      var fileFolder, fileNameArray, folder, urlStr, zip;
      urlStr = fileInfo.url;
      console.log("urlStr: " + urlStr);
      zip = new AdmZip(path.join(__dirname + '/assets/files', fileInfo.name));
      folder = uuid.v1();
      fileFolder = path.join(__dirname, "assets/files/models/" + folder);
      fs.mkdirSync(fileFolder);
      zip.extractAllTo(fileFolder, true);
      fileNameArray = fs.readdirSync(fileFolder);
      return fileNameArray.forEach(function(name) {
        var fileUrlPath, jsName, pos, posi;
        pos = name.indexOf('.obj');
        if (-1 !== pos) {
          jsName = name.substring(0, pos) + '.js';
          posi = urlStr.indexOf('/upload');
          fileUrlPath = urlStr.substring(0, posi);
          fileInfo.url = fileUrlPath + "/files/models/" + folder + '/' + jsName;
          return exec('python convert_obj_three.py -i ' + fileFolder + '/' + name + ' -o ' + fileFolder + '/' + jsName, function(error, stdout, stderr) {
            if (error) {
              return console.log('exec error: ' + error);
            }
          });
        }
      });
    });
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express["static"](path.join(__dirname, "public")));
    return app.use(app.router);
  });

  app.configure('development', function() {
    return app.use(express.errorHandler);
  });

  app.all('*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "X-Requested-With");
    res.header("Access-Control-Expose-Headers", "Content-Length");
    res.header("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS");
    res.header("X-Powered-By", ' 3.2.1');
    res.header("Content-Type", "application/json;charset=utf-8");
    return next();
  });

  app.get('/files/*', files.display);

  http.createServer(app).listen(app.get('port'), function() {
    return console.log("Express server listening on port " + app.get('port'));
  });

}).call(this);
